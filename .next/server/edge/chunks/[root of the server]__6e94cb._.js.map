{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/utils/supabase/middleware.ts"],"sourcesContent":["import { createServerClient } from \"@supabase/ssr\";\nimport { NextResponse, type NextRequest } from \"next/server\";\n\nexport async function updateSession(request: NextRequest) {\n  let supabaseResponse: NextResponse = NextResponse.next();\n\n  const supabase = createServerClient(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n    {\n      cookies: {\n        getAll() {\n          return request.cookies.getAll();\n        },\n        setAll(cookiesToSet) {\n          cookiesToSet.forEach(({ name, value, options }) =>\n            request.cookies.set(name, value)\n          );\n          supabaseResponse = NextResponse.next();\n          cookiesToSet.forEach(({ name, value, options }) =>\n            supabaseResponse.cookies.set(name, value, options)\n          );\n        },\n      },\n    }\n  );\n\n  // Do not run code between createServerClient and\n  // supabase.auth.getUser(). A simple mistake could make it very hard to debug\n  // issues with users being randomly logged out.\n\n  // IMPORTANT: DO NOT REMOVE auth.getUser()\n\n  const {\n    data: { user },\n  } = await supabase.auth.getUser();\n\n  if (\n    !user &&\n    !request.nextUrl.pathname.startsWith(\"/login\") &&\n    !request.nextUrl.pathname.startsWith(\"/auth\")\n  ) {\n    // no user, potentially respond by redirecting the user to the login page\n    const url = request.nextUrl.clone();\n    url.pathname = \"/login\";\n    return NextResponse.redirect(url);\n  }\n\n  // IMPORTANT: You *must* return the supabaseResponse object as it is.\n  // If you're creating a new response object with NextResponse.next() make sure to:\n  // 1. Pass the request in it, like so:\n  //    const myNewResponse = NextResponse.next({ request })\n  // 2. Copy over the cookies, like so:\n  //    myNewResponse.cookies.setAll(supabaseResponse.cookies.getAll())\n  // 3. Change the myNewResponse object to fit your needs, but avoid changing\n  //    the cookies!\n  // 4. Finally:\n  //    return myNewResponse\n  // If this is not done, you may be causing the browser and server to go out\n  // of sync and terminate the user's session prematurely!\n\n  return supabaseResponse;\n}\n"],"names":[],"mappings":";;;AAAA;AACA;AAAA;AADA;;;AAGO,eAAe,cAAc,OAAoB;IACtD,IAAI,mBAAiC,qLAAA,CAAA,eAAY,CAAC,IAAI;IAEtD,MAAM,WAAW,CAAA,GAAA,yKAAA,CAAA,qBAAkB,AAAD,sUAGhC;QACE,SAAS;YACP;gBACE,OAAO,QAAQ,OAAO,CAAC,MAAM;YAC/B;YACA,QAAO,YAAY;gBACjB,aAAa,OAAO,CAAC,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,OAAO,EAAE,GAC5C,QAAQ,OAAO,CAAC,GAAG,CAAC,MAAM;gBAE5B,mBAAmB,qLAAA,CAAA,eAAY,CAAC,IAAI;gBACpC,aAAa,OAAO,CAAC,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,OAAO,EAAE,GAC5C,iBAAiB,OAAO,CAAC,GAAG,CAAC,MAAM,OAAO;YAE9C;QACF;IACF;IAGF,iDAAiD;IACjD,6EAA6E;IAC7E,+CAA+C;IAE/C,0CAA0C;IAE1C,MAAM,EACJ,MAAM,EAAE,IAAI,EAAE,EACf,GAAG,MAAM,SAAS,IAAI,CAAC,OAAO;IAE/B,IACE,CAAC,QACD,CAAC,QAAQ,OAAO,CAAC,QAAQ,CAAC,UAAU,CAAC,aACrC,CAAC,QAAQ,OAAO,CAAC,QAAQ,CAAC,UAAU,CAAC,UACrC;QACA,yEAAyE;QACzE,MAAM,MAAM,QAAQ,OAAO,CAAC,KAAK;QACjC,IAAI,QAAQ,GAAG;QACf,OAAO,qLAAA,CAAA,eAAY,CAAC,QAAQ,CAAC;IAC/B;IAEA,qEAAqE;IACrE,kFAAkF;IAClF,sCAAsC;IACtC,0DAA0D;IAC1D,qCAAqC;IACrC,qEAAqE;IACrE,2EAA2E;IAC3E,kBAAkB;IAClB,cAAc;IACd,0BAA0B;IAC1B,2EAA2E;IAC3E,wDAAwD;IAExD,OAAO;AACT"}},
    {"offset": {"line": 71, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 77, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/utils/supabase/server.ts"],"sourcesContent":["import { createServerClient } from \"@supabase/ssr\";\nimport { cookies } from \"next/headers\";\nimport { createClient } from \"@supabase/supabase-js\";\n\nexport async function createServerClientInstance() {\n  const cookieStore = await cookies();\n\n  return createServerClient(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n    {\n      cookies: {\n        getAll() {\n          return cookieStore.getAll();\n        },\n        setAll(cookiesToSet) {\n          try {\n            cookiesToSet.forEach(({ name, value, options }) =>\n              cookieStore.set(name, value, options)\n            );\n          } catch {\n            // The `setAll` method was called from a Server Component.\n            // This can be ignored if you have middleware refreshing\n            // user sessions.\n          }\n        },\n      },\n    }\n  );\n}\n\nexport async function createAdmin() {\n  return createClient(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.SUPABASE_SERVICE_ROLE_KEY!,\n    {\n      auth: {\n        autoRefreshToken: false,\n        persistSession: false,\n      },\n    }\n  );\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;AAAA;AADA;AAEA;;;;AAEO,eAAe;IACpB,MAAM,cAAc,MAAM,CAAA,GAAA,mKAAA,CAAA,UAAO,AAAD;IAEhC,OAAO,CAAA,GAAA,yKAAA,CAAA,qBAAkB,AAAD,sUAGtB;QACE,SAAS;YACP;gBACE,OAAO,YAAY,MAAM;YAC3B;YACA,QAAO,YAAY;gBACjB,IAAI;oBACF,aAAa,OAAO,CAAC,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,OAAO,EAAE,GAC5C,YAAY,GAAG,CAAC,MAAM,OAAO;gBAEjC,EAAE,OAAM;gBACN,0DAA0D;gBAC1D,wDAAwD;gBACxD,iBAAiB;gBACnB;YACF;QACF;IACF;AAEJ;AAEO,eAAe;IACpB,OAAO,CAAA,GAAA,uLAAA,CAAA,eAAY,AAAD,gFAEhB,QAAQ,GAAG,CAAC,yBAAyB,EACrC;QACE,MAAM;YACJ,kBAAkB;YAClB,gBAAgB;QAClB;IACF;AAEJ"}},
    {"offset": {"line": 116, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 122, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/middleware.ts"],"sourcesContent":["import { type NextRequest, NextResponse } from \"next/server\";\nimport { updateSession } from \"@/utils/supabase/middleware\";\nimport { createServerComponentClient } from \"@supabase/auth-helpers-nextjs\";\nimport { createServerClientInstance } from \"./utils/supabase/server\";\n\nexport async function middleware(request: NextRequest) {\n  // Kald updateSession for at håndtere sessionen først\n  let supabaseResponse = await updateSession(request);\n\n  const supabase = await createServerClientInstance({\n    cookies: () => supabaseResponse.cookies,\n  });\n\n  // Hent bruger fra sessionen\n  const {\n    data: { user },\n  } = await supabase.auth.getUser();\n\n  if (!user) {\n    return supabaseResponse; // Ingen bruger, updateSession håndterer det\n  }\n\n  // Slå brugerens rolle op i permission-tabellen\n  const { data: permission, error } = await supabase\n    .from(\"permission\")\n    .select(\"role\")\n    .eq(\"user_id\", user.id)\n    .single();\n\n  if (error || !permission) {\n    console.error(\n      \"Permission lookup failed:\",\n      error?.message || \"No permission found\"\n    );\n    const url = request.nextUrl.clone();\n    url.pathname = \"/403\";\n    return NextResponse.redirect(url);\n  }\n\n  // Restrict access to /admin/settings if the role is not editor\n  if (\n    request.nextUrl.pathname.startsWith(\"/admin/settings\") &&\n    permission.role !== \"editor\"\n  ) {\n    const url = request.nextUrl.clone();\n    url.pathname = \"/403\";\n    return NextResponse.redirect(url);\n  }\n\n  // Fortsæt med den oprindelige anmodning\n  return NextResponse.next();\n}\n"],"names":[],"mappings":";;;AAAA;AACA;AAEA;AAHA;;;;AAKO,eAAe,WAAW,OAAoB;IACnD,qDAAqD;IACrD,IAAI,mBAAmB,MAAM,CAAA,GAAA,sIAAA,CAAA,gBAAa,AAAD,EAAE;IAE3C,MAAM,WAAW,MAAM,CAAA,GAAA,kIAAA,CAAA,6BAA0B,AAAD,EAAE;QAChD,SAAS,IAAM,iBAAiB,OAAO;IACzC;IAEA,4BAA4B;IAC5B,MAAM,EACJ,MAAM,EAAE,IAAI,EAAE,EACf,GAAG,MAAM,SAAS,IAAI,CAAC,OAAO;IAE/B,IAAI,CAAC,MAAM;QACT,OAAO,kBAAkB,4CAA4C;IACvE;IAEA,+CAA+C;IAC/C,MAAM,EAAE,MAAM,UAAU,EAAE,KAAK,EAAE,GAAG,MAAM,SACvC,IAAI,CAAC,cACL,MAAM,CAAC,QACP,EAAE,CAAC,WAAW,KAAK,EAAE,EACrB,MAAM;IAET,IAAI,SAAS,CAAC,YAAY;QACxB,QAAQ,KAAK,CACX,6BACA,OAAO,WAAW;QAEpB,MAAM,MAAM,QAAQ,OAAO,CAAC,KAAK;QACjC,IAAI,QAAQ,GAAG;QACf,OAAO,qLAAA,CAAA,eAAY,CAAC,QAAQ,CAAC;IAC/B;IAEA,+DAA+D;IAC/D,IACE,QAAQ,OAAO,CAAC,QAAQ,CAAC,UAAU,CAAC,sBACpC,WAAW,IAAI,KAAK,UACpB;QACA,MAAM,MAAM,QAAQ,OAAO,CAAC,KAAK;QACjC,IAAI,QAAQ,GAAG;QACf,OAAO,qLAAA,CAAA,eAAY,CAAC,QAAQ,CAAC;IAC/B;IAEA,wCAAwC;IACxC,OAAO,qLAAA,CAAA,eAAY,CAAC,IAAI;AAC1B"}},
    {"offset": {"line": 160, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}