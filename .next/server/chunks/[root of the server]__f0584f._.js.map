{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 151, "column": 0}, "map": {"version":3,"sources":["file:///Users/marcmoller/Documents/GitHub/hhservice/src/app/%28dashboard%29/admin/settings/uploads/route.ts"],"sourcesContent":["import path from \"path\";\nimport { NextRequest, NextResponse } from \"next/server\";\nimport { IncomingForm, Fields, Files } from \"formidable\";\nimport { Readable } from \"stream\";\nimport { IncomingMessage } from \"http\";\nimport sharp from \"sharp\";\n\nexport const config = { api: { bodyParser: false } };\n\nasync function isAdmin(req: NextRequest) {\n  const authHeader = req.headers.get(\"Authorization\");\n  return authHeader === \"Bearer SECRET_ADMIN_KEY\";\n}\n\nasync function convertNextRequestToIncomingMessage(\n  req: NextRequest\n): Promise<IncomingMessage> {\n  const arrayBuffer = await req.arrayBuffer();\n  const buffer = Buffer.from(arrayBuffer);\n  const stream = new Readable();\n  stream.push(buffer);\n  stream.push(null);\n\n  return Object.assign(stream, {\n    headers: Object.fromEntries(req.headers.entries()),\n    method: req.method,\n    url: req.url,\n  }) as IncomingMessage;\n}\n\nasync function processImage(\n  filePath: string,\n  outputPath: string,\n  fileType: string\n) {\n  let width: number, height: number;\n\n  if (fileType === \"hero\") {\n    width = 1920;\n    height = Math.round(width / (16 / 9)); // 16:9 aspect ratio\n  } else if (fileType === \"about\") {\n    width = 1000;\n    height = 1000; // 1:1 aspect ratio\n  } else {\n    throw new Error(\"Invalid file type\");\n  }\n\n  await sharp(filePath)\n    .resize(width, height, { fit: \"cover\" })\n    .toFormat(\"png\") // Convert to PNG\n    .toFile(outputPath);\n}\n\n// Handle File Upload\nexport async function POST(req: NextRequest) {\n  if (!(await isAdmin(req))) {\n    return NextResponse.json({ message: \"Unauthorized\" }, { status: 403 });\n  }\n\n  try {\n    const form = new IncomingForm({\n      multiples: false,\n      maxFileSize: 5 * 1024 * 1024, // 5MB limit\n    });\n\n    // Convert Next.js request into IncomingMessage\n    const incomingReq = await convertNextRequestToIncomingMessage(req);\n\n    const { fields, files }: { fields: Fields; files: Files } =\n      await new Promise((resolve, reject) => {\n        form.parse(incomingReq, (err, fields, files) => {\n          if (err) reject(err);\n          else resolve({ fields, files });\n        });\n      });\n\n    if (!files.file) {\n      return NextResponse.json({ message: \"No file found\" }, { status: 400 });\n    }\n\n    const file = Array.isArray(files.file) ? files.file[0] : files.file;\n    if (!file.filepath) {\n      return NextResponse.json(\n        { message: \"File upload failed\" },\n        { status: 400 }\n      );\n    }\n\n    const fileType = Array.isArray(fields.type) ? fields.type[0] : fields.type;\n    const validTypes = [\"hero\", \"about\"];\n\n    if (!fileType || !validTypes.includes(fileType)) {\n      return NextResponse.json(\n        { message: \"Invalid file type. Use 'hero' or 'about'.\" },\n        { status: 400 }\n      );\n    }\n\n    const uploadDir = path.join(process.cwd(), \"public\");\n    const fileName = `${fileType}.png`; // Altid gem som PNG\n    const newPath = path.join(uploadDir, fileName);\n\n    // Resize og konverter billede til PNG\n    await processImage(file.filepath, newPath, fileType);\n\n    return NextResponse.json({\n      message: `File uploaded and converted successfully!`,\n      filePath: `/public/${fileName}`,\n    });\n  } catch (error) {\n    return NextResponse.json(\n      {\n        message: \"Upload failed\",\n        error: error instanceof Error ? error.message : \"Unknown error\",\n      },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 272, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}