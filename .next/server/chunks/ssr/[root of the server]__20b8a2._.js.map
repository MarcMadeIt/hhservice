{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 47, "column": 0}, "map": {"version":3,"sources":["file:///Users/marcmoller/Documents/GitHub/hhservice/src/utils/supabase/server.ts"],"sourcesContent":["import { createServerClient } from \"@supabase/ssr\";\nimport { cookies } from \"next/headers\";\n\nexport async function createClient() {\n  const cookieStore = await cookies();\n\n  return createServerClient(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.SUPABASE_SERVICE_ROLE_KEY!, // Brug Service Role Key\n    {\n      cookies: {\n        getAll() {\n          return cookieStore.getAll();\n        },\n        setAll(cookiesToSet) {\n          try {\n            cookiesToSet.forEach(({ name, value, options }) =>\n              cookieStore.set(name, value, options)\n            );\n          } catch {\n            // Dette kan ignoreres, hvis kaldet ikke krÃ¦ver session-cookies\n          }\n        },\n      },\n    }\n  );\n}\n"],"names":[],"mappings":";;;AAAA;AACA;AADA;;;AAGO,eAAe;IACpB,MAAM,cAAc,MAAM,CAAA,GAAA,+HAAA,CAAA,UAAO,AAAD;IAEhC,OAAO,CAAA,GAAA,yKAAA,CAAA,qBAAkB,AAAD,gFAEtB,QAAQ,GAAG,CAAC,yBAAyB,EACrC;QACE,SAAS;YACP;gBACE,OAAO,YAAY,MAAM;YAC3B;YACA,QAAO,YAAY;gBACjB,IAAI;oBACF,aAAa,OAAO,CAAC,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,OAAO,EAAE,GAC5C,YAAY,GAAG,CAAC,MAAM,OAAO;gBAEjC,EAAE,OAAM;gBACN,+DAA+D;gBACjE;YACF;QACF;IACF;AAEJ"}},
    {"offset": {"line": 72, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 78, "column": 0}, "map": {"version":3,"sources":["file:///Users/marcmoller/Documents/GitHub/hhservice/src/app/%28dashboard%29/admin/content/actions.ts"],"sourcesContent":["\"use server\";\n\nimport { createClient } from \"@/utils/supabase/server\";\n\nexport async function setNewNews() {\n  try {\n    const supabase = await createClient();\n\n    const { data, error } = await supabase\n      .from(\"news\")\n      .insert({ title: \"New news\" });\n\n    if (error) {\n      console.error(\"Error inserting news:\", error.message);\n    } else {\n      console.log(\"News inserted:\", data);\n    }\n  } catch (err) {\n    console.error(\"Unexpected error:\", err);\n  }\n}\n"],"names":[],"mappings":";;;;;AAEA;;;;;AAEO,eAAe,uCAAQ,GAAR;IACpB,IAAI;QACF,MAAM,WAAW,MAAM,CAAA,GAAA,kIAAA,CAAA,eAAY,AAAD;QAElC,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,SAC3B,IAAI,CAAC,QACL,MAAM,CAAC;YAAE,OAAO;QAAW;QAE9B,IAAI,OAAO;YACT,QAAQ,KAAK,CAAC,yBAAyB,MAAM,OAAO;QACtD,OAAO;YACL,QAAQ,GAAG,CAAC,kBAAkB;QAChC;IACF,EAAE,OAAO,KAAK;QACZ,QAAQ,KAAK,CAAC,qBAAqB;IACrC;AACF;;;IAhBsB;;AAAA,+OAAA"}},
    {"offset": {"line": 108, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 114, "column": 0}, "map": {"version":3,"sources":["file:///Users/marcmoller/Documents/GitHub/hhservice/src/app/%28dashboard%29/admin/content/page.tsx"],"sourcesContent":["import React from \"react\";\nimport { setNewNews } from \"./actions\";\n\nconst Content = () => {\n  return (\n    <div>\n      <button onClick={setNewNews}>Add News</button>\n    </div>\n  );\n};\n\nexport default Content;\n"],"names":[],"mappings":";;;;AACA;;;AAEA,MAAM,UAAU;IACd,qBACE,8OAAC;kBACC,cAAA,8OAAC;YAAO,SAAS,0JAAA,CAAA,aAAU;sBAAE;;;;;;;;;;;AAGnC;uCAEe"}},
    {"offset": {"line": 138, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 150, "column": 0}, "map": {"version":3,"sources":["file:///Users/marcmoller/Documents/GitHub/hhservice/src/lib/actions.ts"],"sourcesContent":["\"use server\";\n\nimport { revalidatePath } from \"next/cache\";\nimport { redirect } from \"next/navigation\";\n\nimport { createClient } from \"@/utils/supabase/server\";\n\n//REGISTER\n\nexport async function signup(formData: FormData) {\n  const supabase = await createClient();\n\n  const data = {\n    email: formData.get(\"email\") as string,\n    password: formData.get(\"password\") as string,\n    role: (formData.get(\"role\") as string) || \"editor\",\n  };\n\n  // Step 1: Use Admin API to create a user without logging in\n  const { data: user, error } = await supabase.auth.admin.createUser({\n    email: data.email,\n    password: data.password,\n    email_confirm: true, // Mark email as confirmed, if relevant\n  });\n\n  if (error) {\n    throw new Error(\"Signup failed: \" + error.message);\n  }\n\n  const userId = user?.user?.id;\n\n  if (!userId) {\n    throw new Error(\"Failed to retrieve user ID after signup.\");\n  }\n\n  // Step 2: Create a profile in the \"profiles\" table using the service role\n  const serviceSupabase = await createClient();\n  const { error: profileError } = await serviceSupabase\n    .from(\"profiles\")\n    .insert([\n      {\n        id: userId,\n        role: data.role,\n      },\n    ]);\n\n  if (profileError) {\n    throw new Error(\"Failed to create profile: \" + profileError.message);\n  }\n\n  console.log(\"User signed up without session and profile created.\");\n\n  // Optionally, revalidate paths or do other post-signup actions\n  revalidatePath(\"/\", \"layout\");\n}\n\n//LOGOUT\n\nexport async function signOut() {\n  const supabase = await createClient();\n\n  await supabase.auth.signOut();\n\n  revalidatePath(\"/\", \"layout\");\n  redirect(\"/login\");\n}\n\n// ADMIN CHECK\n\nexport async function isAdmin() {\n  const supabase = await createClient();\n\n  const {\n    data: { user },\n    error: authError,\n  } = await supabase.auth.getUser();\n\n  if (authError) {\n    throw new Error(\"Failed to authenticate user: \" + authError.message);\n  }\n\n  if (!user) {\n    return false;\n  }\n\n  const { data: profile, error: profileError } = await supabase\n    .from(\"profiles\")\n    .select(\"role\")\n    .eq(\"id\", user.id)\n    .single();\n\n  if (profileError) {\n    throw new Error(\"Failed to fetch user role: \" + profileError.message);\n  }\n\n  return profile.role === \"admin\";\n}\n\n// ADMIN GET ALL USERS\n\nexport async function getAllUsers() {\n  const supabase = await createClient();\n\n  const admin = await isAdmin();\n\n  if (!admin) {\n    throw new Error(\"Unauthorized: Only admins can access this resource\");\n  }\n\n  // Hent alle brugere\n  const {\n    data: { users },\n    error: fetchError,\n  } = await supabase.auth.admin.listUsers();\n\n  if (fetchError) {\n    throw new Error(\"Failed to fetch users: \" + fetchError.message);\n  }\n\n  return users || [];\n}\n\nexport async function getUserRole() {\n  const supabase = await createClient();\n\n  const {\n    data: { user },\n    error: authError,\n  } = await supabase.auth.getUser();\n\n  if (authError) {\n    throw new Error(\"Failed to authenticate user: \" + authError.message);\n  }\n\n  if (!user) {\n    throw new Error(\"Unauthorized: No user logged in\");\n  }\n\n  const { data: profile, error: profileError } = await supabase\n    .from(\"profiles\")\n    .select(\"role\")\n    .eq(\"id\", user.id)\n    .single();\n\n  if (profileError) {\n    throw new Error(\"Failed to fetch user role: \" + profileError.message);\n  }\n\n  const role = profile.role;\n  const isAdmin = role === \"admin\";\n\n  return { role, isAdmin };\n}\n\nexport async function deleteUser(userId: string, requesterId: string) {\n  const supabase = await createClient();\n\n  // Check if the requester is an admin\n  const { data: profile, error: profileError } = await supabase\n    .from(\"profiles\")\n    .select(\"role\")\n    .eq(\"id\", requesterId)\n    .single();\n\n  if (profileError) {\n    throw new Error(\n      \"Failed to retrieve requester profile: \" + profileError.message\n    );\n  }\n\n  if (profile.role !== \"admin\") {\n    throw new Error(\"Only admins can delete users.\");\n  }\n\n  // Proceed with user deletion\n  const { error } = await supabase.auth.admin.deleteUser(userId);\n\n  if (error) {\n    console.error(\"Error deleting user:\", error.message);\n  } else {\n    console.log(\"User deleted successfully\");\n  }\n}\n\nexport async function getAllNews() {\n  const supabase = await createClient();\n\n  const { data, error } = await supabase.from(\"news\").select(\"*\");\n\n  if (error) {\n    throw new Error(\"Failed to fetch news: \" + error.message);\n  }\n\n  return data;\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 303, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 309, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 318, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}