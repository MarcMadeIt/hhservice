{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/marcmoller/Documents/GitHub/hhservice/src/lib/auth/readUserSession.ts"],"sourcesContent":["\"use server\";\n\nimport { createServerClientInstance } from \"@/utils/supabase/server\";\nimport { useAuthStore } from \"./useAuthStore\";\n\nexport async function readUserSession() {\n  const supabase = await createServerClientInstance();\n\n  try {\n    // Hent brugerdata fra Supabase session\n    const { data: userResponse, error: userError } =\n      await supabase.auth.getUser();\n\n    if (userError || !userResponse?.user) {\n      console.error(\"User fetch error:\", userError?.message || \"No user found\");\n      return null;\n    }\n\n    // Hent rolle direkte fra brugerens metadata\n    const role = userResponse.user.user_metadata?.role;\n\n    if (!role) {\n      console.error(\"Role not found in metadata\");\n      return null;\n    }\n\n    return {\n      user: userResponse.user,\n      role,\n    };\n  } catch (error) {\n    console.error(\"Unexpected error in readUserSession:\", error);\n    return null;\n  }\n}\n\nexport async function fetchAndSetUserSession() {\n  try {\n    const session = await readUserSession();\n\n    if (session) {\n      useAuthStore.getState().setUser({\n        id: session.user.id,\n        email: session.user.email,\n      });\n      useAuthStore.getState().setRole(session.role as \"admin\" | \"editor\");\n    } else {\n      useAuthStore.getState().clearSession();\n    }\n  } catch (error) {\n    console.error(\"Failed to fetch and set session:\", error);\n    useAuthStore.getState().clearSession();\n  }\n}\n"],"names":[],"mappings":";;;;;;IAKsB;IA+BA"}},
    {"offset": {"line": 15, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 21, "column": 0}, "map": {"version":3,"sources":["file:///Users/marcmoller/Documents/GitHub/hhservice/src/components/admin/layout/Navbar.tsx"],"sourcesContent":["\"use client\";\n\nimport { useEffect, useState } from \"react\";\n\nimport Link from \"next/link\";\nimport { usePathname } from \"next/navigation\";\nimport { FaComment, FaGear, FaHouse, FaList, FaMessage } from \"react-icons/fa6\";\nimport { readUserSession } from \"@/lib/auth/readUserSession\";\nimport Image from \"next/image\";\n\nconst Navbar = () => {\n  const pathname = usePathname();\n  const [role, setRole] = useState<string | null>(null);\n\n  useEffect(() => {\n    (async () => {\n      const session = await readUserSession();\n      if (session) {\n        setRole(session.role);\n      } else {\n        setRole(null);\n      }\n    })();\n  }, []);\n\n  return (\n    <div className=\"flex flex-col items-center justify-between  bg-base-100 rounded-lg sm:fixed sm:h-full md:py-0 md:pr-0\">\n      <div className=\"flex flex-col sm:gap-5 h-full \">\n        <div className=\"flex flex-col items-center justify-center h-24 w-full text-xl\">\n          <span className=\"font-bold\">ADMIN</span>\n          <span className=\"text-base font-semibold\">hhservice.dk</span>\n        </div>\n        <div className=\"hidden sm:flex\">\n          <ul className=\"menu menu-lg gap-2 rounded-box w-56 xl:w-72\">\n            <li>\n              <Link\n                className={pathname === \"/admin\" ? \"active\" : \"\"}\n                href=\"/admin\"\n              >\n                Overblik\n              </Link>\n            </li>\n            <li>\n              <Link\n                className={pathname === \"/admin/content\" ? \"active\" : \"\"}\n                href=\"/admin/content\"\n              >\n                Indhold\n              </Link>\n            </li>\n            <li>\n              <Link\n                className={pathname === \"/admin/messages\" ? \"active\" : \"\"}\n                href=\"/admin/messages\"\n              >\n                Henvendelser\n              </Link>\n            </li>\n            {role === \"admin\" && (\n              <li>\n                <Link\n                  className={pathname === \"/admin/settings\" ? \"active\" : \"\"}\n                  href=\"/admin/settings\"\n                >\n                  Indstillinger\n                </Link>\n              </li>\n            )}\n          </ul>\n        </div>\n        <div className=\"flex flex-col items-center sm:hidden fixed bottom-5 left-1/2 transform -translate-x-1/2 justify-center z-30 max-w-[300px] w-full\">\n          <ul className=\"menu menu-horizontal bg-base-200 rounded-box flex-wrap justify-center max-w-md w-full gap-4\">\n            <li>\n              <Link\n                href=\"/admin\"\n                className={pathname === \"/admin\" ? \"active\" : \"\"}\n              >\n                <FaHouse size={25} />\n              </Link>\n            </li>\n            <li>\n              <Link\n                href=\"/admin/content\"\n                className={pathname === \"/admin/content\" ? \"active\" : \"\"}\n              >\n                <FaList size={25} />\n              </Link>\n            </li>\n            <li>\n              <Link\n                href=\"/admin/messages\"\n                className={pathname === \"/admin/messages\" ? \"active\" : \"\"}\n              >\n                <FaComment size={25} />\n              </Link>\n            </li>\n            {role === \"admin\" && (\n              <li>\n                <Link\n                  href=\"/admin/settings\"\n                  className={pathname === \"/admin/settings\" ? \"active\" : \"\"}\n                >\n                  <FaGear size={25} />\n                </Link>\n              </li>\n            )}\n          </ul>\n        </div>\n      </div>\n      <span className=\"text-[11px] items-center justify-center p-4 hidden sm:flex\">\n        Â© Crafted by Marccode\n      </span>\n    </div>\n  );\n};\n\nexport default Navbar;\n"],"names":[],"mappings":";;;;AAEA;AAEA;AACA;AAEA;AADA;;;AANA;;;;;;AAUA,MAAM,SAAS;;IACb,MAAM,WAAW,CAAA,GAAA,qIAAA,CAAA,cAAW,AAAD;IAC3B,MAAM,CAAC,MAAM,QAAQ,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAiB;IAEhD,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;4BAAE;YACR;oCAAC;oBACC,MAAM,UAAU,MAAM,CAAA,GAAA,wIAAA,CAAA,kBAAe,AAAD;oBACpC,IAAI,SAAS;wBACX,QAAQ,QAAQ,IAAI;oBACtB,OAAO;wBACL,QAAQ;oBACV;gBACF;aAAC;QACH;2BAAG,EAAE;IAEL,qBACE,6LAAC;QAAI,WAAU;;0BACb,6LAAC;gBAAI,WAAU;;kCACb,6LAAC;wBAAI,WAAU;;0CACb,6LAAC;gCAAK,WAAU;0CAAY;;;;;;0CAC5B,6LAAC;gCAAK,WAAU;0CAA0B;;;;;;;;;;;;kCAE5C,6LAAC;wBAAI,WAAU;kCACb,cAAA,6LAAC;4BAAG,WAAU;;8CACZ,6LAAC;8CACC,cAAA,6LAAC,+JAAA,CAAA,UAAI;wCACH,WAAW,aAAa,WAAW,WAAW;wCAC9C,MAAK;kDACN;;;;;;;;;;;8CAIH,6LAAC;8CACC,cAAA,6LAAC,+JAAA,CAAA,UAAI;wCACH,WAAW,aAAa,mBAAmB,WAAW;wCACtD,MAAK;kDACN;;;;;;;;;;;8CAIH,6LAAC;8CACC,cAAA,6LAAC,+JAAA,CAAA,UAAI;wCACH,WAAW,aAAa,oBAAoB,WAAW;wCACvD,MAAK;kDACN;;;;;;;;;;;gCAIF,SAAS,yBACR,6LAAC;8CACC,cAAA,6LAAC,+JAAA,CAAA,UAAI;wCACH,WAAW,aAAa,oBAAoB,WAAW;wCACvD,MAAK;kDACN;;;;;;;;;;;;;;;;;;;;;;kCAOT,6LAAC;wBAAI,WAAU;kCACb,cAAA,6LAAC;4BAAG,WAAU;;8CACZ,6LAAC;8CACC,cAAA,6LAAC,+JAAA,CAAA,UAAI;wCACH,MAAK;wCACL,WAAW,aAAa,WAAW,WAAW;kDAE9C,cAAA,6LAAC,kJAAA,CAAA,UAAO;4CAAC,MAAM;;;;;;;;;;;;;;;;8CAGnB,6LAAC;8CACC,cAAA,6LAAC,+JAAA,CAAA,UAAI;wCACH,MAAK;wCACL,WAAW,aAAa,mBAAmB,WAAW;kDAEtD,cAAA,6LAAC,kJAAA,CAAA,SAAM;4CAAC,MAAM;;;;;;;;;;;;;;;;8CAGlB,6LAAC;8CACC,cAAA,6LAAC,+JAAA,CAAA,UAAI;wCACH,MAAK;wCACL,WAAW,aAAa,oBAAoB,WAAW;kDAEvD,cAAA,6LAAC,kJAAA,CAAA,YAAS;4CAAC,MAAM;;;;;;;;;;;;;;;;gCAGpB,SAAS,yBACR,6LAAC;8CACC,cAAA,6LAAC,+JAAA,CAAA,UAAI;wCACH,MAAK;wCACL,WAAW,aAAa,oBAAoB,WAAW;kDAEvD,cAAA,6LAAC,kJAAA,CAAA,SAAM;4CAAC,MAAM;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;0BAO1B,6LAAC;gBAAK,WAAU;0BAA6D;;;;;;;;;;;;AAKnF;GAxGM;;QACa,qIAAA,CAAA,cAAW;;;KADxB;uCA0GS"}},
    {"offset": {"line": 296, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 302, "column": 0}, "map": {"version":3,"sources":["file:///Users/marcmoller/Documents/GitHub/hhservice/src/lib/server/actions.ts"],"sourcesContent":["\"use server\";\n\nimport {\n  createAdmin,\n  createServerClientInstance,\n} from \"@/utils/supabase/server\";\nimport { revalidatePath } from \"next/cache\";\nimport { redirect } from \"next/navigation\";\n\n//REGISTER\n\nexport async function createMember(data: {\n  email: string;\n  password: string;\n  role: \"editor\" | \"admin\";\n  name: string;\n}) {\n  const supabase = await createAdmin();\n\n  try {\n    const createResult = await supabase.auth.admin.createUser({\n      email: data.email,\n      password: data.password,\n      email_confirm: true,\n      user_metadata: {\n        role: data.role,\n      },\n    });\n\n    if (createResult.error) {\n      console.error(\"Failed to create user:\", createResult.error.message);\n      throw new Error(\"Failed to create user: \" + createResult.error.message);\n    }\n\n    console.log(\"User created:\", createResult.data.user);\n\n    const memberResult = await supabase\n      .from(\"members\")\n      .insert({ name: data.name, id: createResult.data.user?.id });\n\n    if (memberResult.error) {\n      console.error(\n        \"Failed to insert into members:\",\n        memberResult.error.message\n      );\n      throw new Error(\n        \"Failed to insert into members: \" + memberResult.error.message\n      );\n    }\n\n    console.log(\"Member inserted:\", memberResult.data);\n\n    const permissionsResult = await supabase\n      .from(\"permissions\")\n      .insert({ role: data.role, member_id: createResult.data.user?.id });\n\n    if (permissionsResult.error) {\n      console.error(\n        \"Failed to insert into permissions:\",\n        permissionsResult.error.message\n      );\n      throw new Error(\n        \"Failed to insert into permissions: \" + permissionsResult.error.message\n      );\n    }\n\n    console.log(\"Permissions inserted:\", permissionsResult.data);\n\n    return createResult.data.user;\n  } catch (err) {\n    console.error(\"Unexpected error during member creation:\", err);\n    throw err;\n  }\n}\n\n//LOGOUT\n\nexport async function signOut() {\n  const supabase = await createServerClientInstance();\n\n  await supabase.auth.signOut();\n\n  revalidatePath(\"/\", \"layout\");\n  redirect(\"/login\");\n}\n\n//USERS\n\nexport async function getAllUsers() {\n  const supabase = await createAdmin();\n\n  const {\n    data: { users },\n    error: fetchError,\n  } = await supabase.auth.admin.listUsers();\n\n  if (fetchError) {\n    throw new Error(\"Failed to fetch users: \" + fetchError.message);\n  }\n\n  const userIds = users.map((user) => user.id);\n  const { data: permissions, error: permissionsError } = await supabase\n    .from(\"permissions\")\n    .select(\"member_id, role\")\n    .in(\"member_id\", userIds);\n\n  if (permissionsError) {\n    throw new Error(\"Failed to fetch permissions: \" + permissionsError.message);\n  }\n\n  const { data: members, error: membersError } = await supabase\n    .from(\"members\")\n    .select(\"id, name\")\n    .in(\"id\", userIds);\n\n  if (membersError) {\n    throw new Error(\"Failed to fetch members: \" + membersError.message);\n  }\n\n  const usersWithRolesAndNames = users.map((user) => {\n    const userPermission = permissions.find(\n      (permission) => permission.member_id === user.id\n    );\n    const userName = members.find((member) => member.id === user.id)?.name;\n    return {\n      ...user,\n      role: userPermission ? userPermission.role : null,\n      name: userName || null,\n    };\n  });\n\n  return usersWithRolesAndNames || [];\n}\n\nexport async function deleteUser(userId: string) {\n  const supabase = await createAdmin();\n\n  try {\n    // Step 1: Delete user from Supabase Auth\n    const { error: deleteAuthError } = await supabase.auth.admin.deleteUser(\n      userId\n    );\n\n    if (deleteAuthError) {\n      console.error(\n        \"Failed to delete user from auth:\",\n        deleteAuthError.message\n      );\n      throw new Error(\n        \"Failed to delete user from auth: \" + deleteAuthError.message\n      );\n    }\n\n    console.log(\"User deleted from auth:\", userId);\n\n    // Step 2: Delete user from members table\n    const { error: deleteMemberError } = await supabase\n      .from(\"members\")\n      .delete()\n      .eq(\"id\", userId);\n\n    if (deleteMemberError) {\n      console.error(\n        \"Failed to delete user from members:\",\n        deleteMemberError.message\n      );\n      throw new Error(\n        \"Failed to delete user from members: \" + deleteMemberError.message\n      );\n    }\n\n    console.log(\"User deleted from members:\", userId);\n\n    // Step 3: Delete user from permissions table\n    const { error: deletePermissionError } = await supabase\n      .from(\"permissions\")\n      .delete()\n      .eq(\"member_id\", userId);\n\n    if (deletePermissionError) {\n      console.error(\n        \"Failed to delete user from permissions:\",\n        deletePermissionError.message\n      );\n      throw new Error(\n        \"Failed to delete user from permissions: \" +\n          deletePermissionError.message\n      );\n    }\n\n    console.log(\"User deleted from permissions:\", userId);\n\n    return { success: true };\n  } catch (err) {\n    console.error(\"Unexpected error during user deletion:\", err);\n    throw err;\n  }\n}\n\n// UPDATE USER\n\nexport async function updateUser(\n  userId: string,\n  data: { email?: string; password?: string; role?: string; name?: string }\n): Promise<void> {\n  const supabase = await createAdmin();\n\n  try {\n    // Update user in Supabase Auth\n    const { error: authError } = await supabase.auth.admin.updateUserById(\n      userId,\n      {\n        email: data.email,\n        password: data.password,\n      }\n    );\n\n    if (authError) {\n      throw new Error(`Failed to update user in auth: ${authError.message}`);\n    }\n\n    // Update user in members table\n    const { error: memberError } = await supabase\n      .from(\"members\")\n      .update({ name: data.name })\n      .eq(\"id\", userId);\n\n    if (memberError) {\n      throw new Error(\n        `Failed to update user in members: ${memberError.message}`\n      );\n    }\n\n    // Update user role in permissions table\n    if (data.role) {\n      const { error: permissionError } = await supabase\n        .from(\"permissions\")\n        .update({ role: data.role })\n        .eq(\"member_id\", userId);\n\n      if (permissionError) {\n        throw new Error(\n          `Failed to update user role: ${permissionError.message}`\n        );\n      }\n    }\n  } catch (error) {\n    console.error(\"Error in updateUser:\", error);\n    throw error;\n  }\n}\n// NEWS\n\nexport async function createNews(\n  title: string,\n  desc: string,\n  city: string,\n  formType: \"normal\" | \"beforeAfter\",\n  image?: File,\n  imageBefore?: File,\n  imageAfter?: File\n): Promise<void> {\n  const supabase = await createServerClientInstance();\n\n  try {\n    let imageUrl: string | null = null;\n    let imageBeforeUrl: string | null = null;\n    let imageAfterUrl: string | null = null;\n\n    const uploadFile = async (file: File, folder: string) => {\n      const fileExt = file.name.split(\".\").pop();\n      const fileName = `${Math.random().toString(36).substring(2)}.${fileExt}`;\n\n      const { data: userData, error: userError } =\n        await supabase.auth.getUser();\n      if (userError || !userData?.user) {\n        throw new Error(\"User not authenticated for photo upload\");\n      }\n\n      const filePath = `${folder}/${userData.user.id}/${fileName}`;\n\n      const { error: uploadError } = await supabase.storage\n        .from(\"news-images\")\n        .upload(filePath, file);\n\n      if (uploadError) {\n        throw new Error(`File upload failed: ${uploadError.message}`);\n      }\n\n      const { data } = await supabase.storage\n        .from(\"news-images\")\n        .getPublicUrl(filePath);\n\n      if (!data || !data.publicUrl) {\n        throw new Error(\"Failed to retrieve public URL\");\n      }\n\n      return data.publicUrl;\n    };\n\n    if (formType === \"normal\" && image) {\n      imageUrl = await uploadFile(image, \"normal\");\n    }\n\n    if (formType === \"beforeAfter\") {\n      if (imageBefore) {\n        imageBeforeUrl = await uploadFile(imageBefore, \"beforeAfter\");\n      }\n      if (imageAfter) {\n        imageAfterUrl = await uploadFile(imageAfter, \"beforeAfter\");\n      }\n    }\n\n    const { data: userData } = await supabase.auth.getUser();\n    if (!userData?.user) {\n      throw new Error(\"User not authenticated\");\n    }\n\n    const { error } = await supabase.from(\"news\").insert([\n      {\n        title,\n        desc,\n        city,\n        formType,\n        image: imageUrl,\n        imageBefore: imageBeforeUrl,\n        imageAfter: imageAfterUrl,\n        creator_id: userData.user.id,\n      },\n    ]);\n\n    if (error) {\n      throw new Error(`Failed to create news: ${error.message}`);\n    }\n  } catch (error) {\n    console.error(\"Error in createNews:\", error);\n    throw error;\n  }\n}\n\nexport async function updateNews(\n  id: number,\n  title: string,\n  desc: string,\n  city: string,\n  formType: \"normal\" | \"beforeAfter\",\n  image?: File,\n  imageBefore?: File,\n  imageAfter?: File\n): Promise<void> {\n  const supabase = await createServerClientInstance();\n\n  try {\n    let imageUrl: string | null = null;\n    let imageBeforeUrl: string | null = null;\n    let imageAfterUrl: string | null = null;\n\n    const uploadFile = async (file: File, folder: string) => {\n      const fileExt = file.name.split(\".\").pop();\n      const fileName = `${Math.random().toString(36).substring(2)}.${fileExt}`;\n\n      const { data: userData, error: userError } =\n        await supabase.auth.getUser();\n      if (userError || !userData?.user) {\n        throw new Error(\"User not authenticated for photo upload\");\n      }\n\n      const filePath = `${folder}/${userData.user.id}/${fileName}`;\n\n      const { error: uploadError } = await supabase.storage\n        .from(\"news-images\")\n        .upload(filePath, file);\n\n      if (uploadError) {\n        throw new Error(`File upload failed: ${uploadError.message}`);\n      }\n\n      const { data } = await supabase.storage\n        .from(\"news-images\")\n        .getPublicUrl(filePath);\n\n      if (!data || !data.publicUrl) {\n        throw new Error(\"Failed to retrieve public URL\");\n      }\n\n      return data.publicUrl;\n    };\n\n    if (formType === \"normal\" && image) {\n      imageUrl = await uploadFile(image, \"normal\");\n    } else {\n      const { data: existingNews } = await supabase\n        .from(\"news\")\n        .select(\"image\")\n        .eq(\"id\", id)\n        .single();\n      imageUrl = existingNews?.image || null;\n    }\n\n    if (formType === \"beforeAfter\") {\n      if (imageBefore) {\n        imageBeforeUrl = await uploadFile(imageBefore, \"beforeAfter\");\n      } else {\n        const { data: existingNews } = await supabase\n          .from(\"news\")\n          .select(\"imageBefore\")\n          .eq(\"id\", id)\n          .single();\n        imageBeforeUrl = existingNews?.imageBefore || null;\n      }\n      if (imageAfter) {\n        imageAfterUrl = await uploadFile(imageAfter, \"beforeAfter\");\n      } else {\n        const { data: existingNews } = await supabase\n          .from(\"news\")\n          .select(\"imageAfter\")\n          .eq(\"id\", id)\n          .single();\n        imageAfterUrl = existingNews?.imageAfter || null;\n      }\n    }\n\n    const { data: userData } = await supabase.auth.getUser();\n    if (!userData?.user) {\n      throw new Error(\"User not authenticated\");\n    }\n\n    const { error } = await supabase\n      .from(\"news\")\n      .update({\n        title,\n        desc,\n        city,\n        formType,\n        image: imageUrl,\n        imageBefore: imageBeforeUrl,\n        imageAfter: imageAfterUrl,\n        creator_id: userData.user.id,\n      })\n      .eq(\"id\", id);\n\n    if (error) {\n      throw new Error(`Failed to update news: ${error.message}`);\n    }\n  } catch (error) {\n    console.error(\"Error in updateNews:\", error);\n    throw error;\n  }\n}\n\nexport async function getAllNews(page: number = 1, limit: number = 6) {\n  const supabase = await createServerClientInstance();\n  const offset = (page - 1) * limit;\n\n  try {\n    const { data, count, error } = await supabase\n      .from(\"news\")\n      .select(\"*\", { count: \"exact\" }) // SÃ¸rg for at tÃ¦lle det totale antal\n      .order(\"created_at\", { ascending: false })\n      .range(offset, offset + limit - 1);\n\n    if (error) {\n      throw new Error(`Failed to fetch news: ${error.message}`);\n    }\n\n    return { news: data, total: count || 0 };\n  } catch (err) {\n    console.error(\"Unexpected error during fetching news:\", err);\n    throw err;\n  }\n}\n\nexport async function getNewsById(newsId: number) {\n  const supabase = await createServerClientInstance();\n\n  try {\n    const { data, error } = await supabase\n      .from(\"news\")\n      .select(\"*\")\n      .eq(\"id\", newsId)\n      .single();\n\n    if (error) {\n      throw new Error(`Failed to fetch news by ID: ${error.message}`);\n    }\n\n    return data;\n  } catch (err) {\n    console.error(\"Unexpected error during fetching news by ID:\", err);\n    throw err;\n  }\n}\n\nexport async function deleteNews(newsId: number): Promise<void> {\n  const supabase = await createServerClientInstance();\n\n  try {\n    const { error } = await supabase.from(\"news\").delete().eq(\"id\", newsId);\n\n    if (error) {\n      throw new Error(`Failed to delete news: ${error.message}`);\n    }\n  } catch (error) {\n    console.error(\"Error in deleteNews:\", error);\n    throw error;\n  }\n}\n\n// REVIEWS\n\nexport async function createReview(\n  name: string,\n  city: string,\n  desc: string,\n  rate: number\n): Promise<void> {\n  const supabase = await createServerClientInstance();\n\n  try {\n    const { data: userData } = await supabase.auth.getUser();\n    if (!userData?.user) {\n      throw new Error(\"User not authenticated\");\n    }\n\n    const { error } = await supabase.from(\"reviews\").insert([\n      {\n        creator: userData.user.id,\n        name,\n        city,\n        desc,\n        rate,\n      },\n    ]);\n\n    if (error) {\n      throw new Error(`Failed to create review: ${error.message}`);\n    }\n  } catch (error) {\n    console.error(\"Error in createReview:\", error);\n    throw error;\n  }\n}\n\nexport async function getAllReviews(page: number = 1, limit: number = 6) {\n  const supabase = await createServerClientInstance();\n  const offset = (page - 1) * limit;\n\n  try {\n    const { data, count, error } = await supabase\n      .from(\"reviews\")\n      .select(\"*\", { count: \"exact\" })\n      .order(\"created_at\", { ascending: false })\n      .range(offset, offset + limit - 1);\n\n    if (error) {\n      throw new Error(`Failed to fetch reviews: ${error.message}`);\n    }\n\n    return { reviews: data, total: count || 0 };\n  } catch (err) {\n    console.error(\"Unexpected error during fetching reviews:\", err);\n    throw err;\n  }\n}\n\nexport async function deleteReview(reviewId: number): Promise<void> {\n  const supabase = await createServerClientInstance();\n\n  try {\n    const { error } = await supabase\n      .from(\"reviews\")\n      .delete()\n      .eq(\"id\", reviewId);\n\n    if (error) {\n      throw new Error(`Failed to delete review: ${error.message}`);\n    }\n  } catch (error) {\n    console.error(\"Error in deleteReview:\", error);\n    throw error;\n  }\n}\n\nexport async function getLatestReviews(limit: number = 10) {\n  const supabase = await createServerClientInstance();\n\n  try {\n    const { data, error } = await supabase\n      .from(\"reviews\")\n      .select(\"*\")\n      .order(\"created_at\", { ascending: false })\n      .limit(limit);\n\n    if (error) {\n      throw new Error(`Failed to fetch latest reviews: ${error.message}`);\n    }\n\n    return data;\n  } catch (err) {\n    console.error(\"Unexpected error during fetching latest reviews:\", err);\n    throw err;\n  }\n}\n\nexport async function updateReview(\n  reviewId: number,\n  name: string,\n  city: string,\n  desc: string,\n  rate: number\n): Promise<void> {\n  const supabase = await createServerClientInstance();\n\n  try {\n    const { error } = await supabase\n      .from(\"reviews\")\n      .update({ name, city, desc, rate })\n      .eq(\"id\", reviewId);\n\n    if (error) {\n      throw new Error(`Failed to update review: ${error.message}`);\n    }\n  } catch (error) {\n    console.error(\"Error in updateReview:\", error);\n    throw error;\n  }\n}\n\nexport async function getReviewById(reviewId: number) {\n  const supabase = await createServerClientInstance();\n\n  try {\n    const { data, error } = await supabase\n      .from(\"reviews\")\n      .select(\"*\")\n      .eq(\"id\", reviewId)\n      .single();\n\n    if (error) {\n      throw new Error(`Failed to fetch review by ID: ${error.message}`);\n    }\n\n    return data;\n  } catch (err) {\n    console.error(\"Unexpected error during fetching review by ID:\", err);\n    throw err;\n  }\n}\n\n// REQUESTS\n\nexport async function getAllRequests(page: number = 1, limit: number = 6) {\n  const supabase = await createServerClientInstance();\n  const offset = (page - 1) * limit;\n\n  try {\n    const { data, count, error } = await supabase\n      .from(\"requests\")\n      .select(\"*\", { count: \"exact\" })\n      .order(\"created_at\", { ascending: false })\n      .range(offset, offset + limit - 1);\n\n    if (error) {\n      throw new Error(`Failed to fetch requests: ${error.message}`);\n    }\n\n    return { requests: data, total: count || 0 };\n  } catch (err) {\n    console.error(\"Unexpected error during fetching requests:\", err);\n    throw err;\n  }\n}\n\nexport async function deleteRequest(requestId: string): Promise<void> {\n  const supabase = await createServerClientInstance();\n\n  try {\n    const { error } = await supabase\n      .from(\"requests\")\n      .delete()\n      .eq(\"id\", requestId);\n\n    if (error) {\n      throw new Error(`Failed to delete request: ${error.message}`);\n    }\n  } catch (error) {\n    console.error(\"Error in deleteRequest:\", error);\n    throw error;\n  }\n}\n\nexport async function updateRequest(\n  requestId: string,\n  data: {\n    name?: string;\n    category?: string;\n    mobile?: string;\n    mail?: string;\n    massage?: string;\n    address?: string;\n    city?: string;\n  }\n): Promise<void> {\n  const supabase = await createServerClientInstance();\n\n  try {\n    const { error } = await supabase\n      .from(\"requests\")\n      .update(data)\n      .eq(\"id\", requestId);\n\n    if (error) {\n      throw new Error(`Failed to update request: ${error.message}`);\n    }\n  } catch (error) {\n    console.error(\"Error in updateRequest:\", error);\n    throw error;\n  }\n}\n\nexport async function getRequestById(requestId: string) {\n  const supabase = await createServerClientInstance();\n\n  try {\n    const { data, error } = await supabase\n      .from(\"requests\")\n      .select(\"*\")\n      .eq(\"id\", requestId)\n      .single();\n\n    if (error) {\n      throw new Error(`Failed to fetch request by ID: ${error.message}`);\n    }\n\n    return data;\n  } catch (err) {\n    console.error(\"Unexpected error during fetching request by ID:\", err);\n    throw err;\n  }\n}\n\n// REQUEST NOTES\n\nexport async function createRequestNote(\n  desc: string,\n  requestId: string\n): Promise<{ id: string; desc: string; created_at: string }> {\n  const supabase = await createServerClientInstance();\n\n  try {\n    // Hent den autentificerede bruger\n    const { data: userData } = await supabase.auth.getUser();\n    if (!userData?.user) {\n      throw new Error(\"User not authenticated\");\n    }\n\n    // IndsÃ¦t noten og returner dataene\n    const { data, error } = await supabase\n      .from(\"notes\")\n      .insert([\n        {\n          desc: desc,\n          request_id: requestId,\n          creator_id: userData.user.id,\n        },\n      ])\n      .select(\"*\")\n      .single();\n\n    if (error) {\n      throw new Error(`Failed to create request note: ${error.message}`);\n    }\n\n    return data;\n  } catch (error) {\n    console.error(\"Error in createRequestNote:\", error);\n    throw error;\n  }\n}\n\nexport async function getNotesByRequestId(requestId: string) {\n  const supabase = await createServerClientInstance();\n\n  try {\n    const { data, error } = await supabase\n      .from(\"notes\")\n      .select(\"*\")\n      .eq(\"request_id\", requestId);\n\n    if (error) {\n      throw new Error(`Failed to fetch notes: ${error.message}`);\n    }\n\n    return data;\n  } catch (err) {\n    console.error(\"Unexpected error during fetching notes:\", err);\n    throw err;\n  }\n}\n\nexport async function deleteRequestNote(noteId: string): Promise<void> {\n  const supabase = await createServerClientInstance();\n\n  try {\n    const { error } = await supabase.from(\"notes\").delete().eq(\"id\", noteId);\n\n    if (error) {\n      throw new Error(`Failed to delete request note: ${error.message}`);\n    }\n  } catch (error) {\n    console.error(\"Error in deleteRequestNote:\", error);\n    throw error;\n  }\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;IAWsB;IAkEA;IAWA;IA8CA;IAmEA;IAoDA;IAuFA;IA8GA;IAsBA;IAqBA;IAiBA;IAiCA;IAsBA;IAkBA;IAqBA;IAwBA;IAuBA;IAsBA;IAkBA;IA6BA;IAuBA;IAqCA;IAoBA"}},
    {"offset": {"line": 352, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 358, "column": 0}, "map": {"version":3,"sources":["file:///Users/marcmoller/Documents/GitHub/hhservice/src/components/admin/layout/Topbar.tsx"],"sourcesContent":["\"use client\";\nimport { signOut } from \"@/lib/server/actions\";\nimport { usePathname } from \"next/navigation\";\nimport React from \"react\";\nimport { FaEllipsis } from \"react-icons/fa6\";\n\ninterface PageTitleMapping {\n  [key: string]: string;\n}\n\nconst Topbar = () => {\n  const pathname = usePathname();\n\n  const pageTitles: PageTitleMapping = {\n    \"/admin\": \"Overblik\",\n    \"/admin/content\": \"Indhold\",\n    \"/admin/messages\": \"Henvendelser\",\n    \"/admin/settings\": \"Indstillinger\",\n  };\n\n  const currentTitle = pageTitles[pathname] || \"Unknown Page\";\n\n  return (\n    <div className=\"navbar bg-base-100 shadow-sm w-full rounded-md pl-5 h-14 flex items-center justify-between\">\n      <div className=\"flex-1\">\n        <a className=\"text-lg md:text-xl font-semibold tracking-wide\">\n          {currentTitle}\n        </a>\n      </div>\n      <div className=\"flex-none\">\n        <div className=\"dropdown dropdown-bottom dropdown-end\">\n          <div tabIndex={0} role=\"button\" className=\"btn btn-ghost btn-sm m-1\">\n            {\" \"}\n            <FaEllipsis />\n          </div>\n          <ul\n            tabIndex={0}\n            className=\"dropdown-content menu bg-base-100 rounded-box z-[1] w-52 p-2 shadow-lg ring-1 ring-black ring-opacity-5\"\n          >\n            <li>\n              <button onClick={signOut}>Log ud</button>\n            </li>\n          </ul>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Topbar;\n"],"names":[],"mappings":";;;;AACA;AACA;AAEA;;;AAJA;;;;AAUA,MAAM,SAAS;;IACb,MAAM,WAAW,CAAA,GAAA,qIAAA,CAAA,cAAW,AAAD;IAE3B,MAAM,aAA+B;QACnC,UAAU;QACV,kBAAkB;QAClB,mBAAmB;QACnB,mBAAmB;IACrB;IAEA,MAAM,eAAe,UAAU,CAAC,SAAS,IAAI;IAE7C,qBACE,6LAAC;QAAI,WAAU;;0BACb,6LAAC;gBAAI,WAAU;0BACb,cAAA,6LAAC;oBAAE,WAAU;8BACV;;;;;;;;;;;0BAGL,6LAAC;gBAAI,WAAU;0BACb,cAAA,6LAAC;oBAAI,WAAU;;sCACb,6LAAC;4BAAI,UAAU;4BAAG,MAAK;4BAAS,WAAU;;gCACvC;8CACD,6LAAC,kJAAA,CAAA,aAAU;;;;;;;;;;;sCAEb,6LAAC;4BACC,UAAU;4BACV,WAAU;sCAEV,cAAA,6LAAC;0CACC,cAAA,6LAAC;oCAAO,SAAS,kIAAA,CAAA,UAAO;8CAAE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOxC;GArCM;;QACa,qIAAA,CAAA,cAAW;;;KADxB;uCAuCS"}},
    {"offset": {"line": 473, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}